 사실 Spring Boot의 문서를 보면 property source를 설정하는 다양한 방법이 제공된다.

1) Devtools global settings properties on your home directory (~/.spring-boot-devtools.properties when devtools is active).
2) @TestPropertySource annotations on your tests.
3) @SpringBootTest#properties annotation attribute on your tests.
4) Command line arguments.
5) Properties from SPRING_APPLICATION_JSON (inline JSON embedded in an environment variable or system property)
6) ServletConfig init parameters.
7) ServletContext init parameters.
8) JNDI attributes from java:comp/env.
9) Java System properties (System.getProperties()).
10) OS environment variables.
11) A RandomValuePropertySource that only has properties in random.*.
12) Profile-specific application properties outside of your packaged jar (application-{profile}.properties and YAML variants)
13) Profile-specific application properties packaged inside your jar (application-{profile}.properties and YAML variants)
14) Application properties outside of your packaged jar (application.properties and YAML variants).
15) Application properties packaged inside your jar (application.properties and YAML variants).
16) @PropertySource annotations on your @Configuration classes.
17) Default properties (specified using SpringApplication.setDefaultProperties).

 위의 목록은 더 높은 우선순위를 갖는 property source부터 차례대로 나열한 것이다.
 여기서 소개하는 application.properties 파일을 'src/main/resources' 폴더에 넣는 방법은
 위의 목록 중 15번에 나오는 방법으로 우선순위로 보면 상당히 아래쪽에 나온다. 즉 상당히 우선순위가 낮다는 말이다.
 'src/main/resources' 폴더에 application.properties 파일을 넣어 놓는다는 것은 배포 시에 jar 파일에
 함께 묶여서 배포가 된다는 것이고 따라서 배포 후에 설정 값을 변경하려는 의도로 사용하기에는 적합하지 않다.
 그러한 용도로 사용하려면 14번에서 말하는 jar 외부의 application.properties를 사용하면 된다.
 그냥 application.properties 파일을 따로 만들어서 jar를 실행하는 directory에 두면 된다.
 jar 안에 있는 application.properties 파일보다 우선순위가 높기 때문에 둘 다 있는 경우
 jar 외부의 application.properties 파일의 값이 더 높은 우선순위를 갖는다.

 여기서 많은 사람들이 우선순위에 대해서 오해하는 점 하나를 짚고 가야겠다.
 예를 들어 jar안에 같이 포함된 application.properties파일과 jar 외부의 application.properties 파일이
 둘 다 존재할 때 외부의 application.properties 파일이 더 우선순위가 높기 때문에
 내부의 application.properties 파일이 완전히 무시된다고 생각하기 쉽다.
 하지만 그렇지 않다. 우선순위가 높은 property source의 값들은 더 낮은 property source의 값들을 덮어쓰는 것이지
 낮은 우선순위의 property source를 읽어들이지 않는 다는 뜻이 아니다.
 즉 둘 다 name 속성이 정의되어있다면 더 높은 우선순위의 property source에 선언된 name 속성 값이 사용된다.
 하지만 age라는 속성이 더 낮은 우선순위의 property source에만 선언되어있다면 낮은 우선순위의 property에 선언되었지만
 그 값이 사용된다. (더 높은 우선순위에 값이 정의되지 않았으므로)

 즉 위 목록의 모든 property source들을 아래쪽부터 윗쪽으로 차례대로 다 찾아서 읽어들이면서
 이미 정의된 property들은 덮어 쓰는 개념이다. 목록을 보면 테스트 환경을 제외하고 command line argument가
 가장 우선순위가 높으므로 임시로 특정 값을 override하고 싶다면 command line을 이용해서 property를 전달하면
 무조건 전달된 값이 이용될 것이다.

 command line을 이용하는 방법은 아래와 같은 방법으로 전달하면 된다. ('server.port' 속성값 지정)
 $ java -jar myapp.jar --server.port=9000

 위 목록에 나열된 방법은 많지만 흔히 사용하는 방법으로 이 정도만 알고 있으면
 대부분의 경우 문제없이 개발을 진행할 수 있다.
 개념적으로 잘 이해하고 있다면 다른 나머지 방법을 이용하는 것도 사실 시간문제일 뿐 크게 어려운 부분은 없을 것이다.