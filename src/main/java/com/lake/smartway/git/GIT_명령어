#tortoisegit
git용 유저인터페이스용 프로그램

### proxy관련 설정
git config --global http.sslVerify false : SSL 인증 사용 안함 (HTTP를 사용)
git config --global http.proxy "proxy 주소" (http://ip:port) : git proxy 설정
git config --global http.proxy : git proxy 설정 확인


### 로컬 저장소
-- cmd창에서 프로젝트 경로에서 수행해야함
git 반영 순서 : add -> commit -> push

git clone [git경로] : project 복사
git status :  현재 변경 된 사항
git init :  뼈대 파일인 .git 디렉토리 생성 ( 로컬 저장소 만들기 )
git remote add origin [git경로] :  [git경로] repository 원격 저장소 연결

git add [파일명 or 폴더명 or -all or *] :  INDEX에 추가 (스테이징영역에 추가)
 >> git add 명령은 파일을 새로 추적할 때도 사용하고 수정한 파일을 Staged 상태로 만들 때도 사용한다. Merge 할 때 충돌난 상태의 파일을 Resolve 상태로 만들때도 사용한다. add의 의미는 프로젝트에 파일을 추가한다기 보다는 다음 커밋에 추가한다고 받아들이는게 좋다.

git commit  : 로컬 저장소에 추가
      -m "코멘트" :  코멘트내용 포함한 커밋
      -v                  : diff 내용 포함한 커밋
      -a                  : add 없이 바로 commit

$ git commit -m [코멘트] : 1.커밋
$ git add [새로운파일] : 2.새로 커밋
$ git commit --amend :  1.커밋이 이력이사라지고 2.새로커밋과 포함되어 커밋

git log : commit 히스토리 보기
git push origin master : Commit 되어 있는 파일들 Repository에 파일 푸쉬

git pull origin master : Repository에 있는 파일 pull
git pull origin (branchname) --allow-unrelated-histories : github 강제 복사

git reset --soft head : 브랜치가 가리키는 커밋만 이전으로 돌림 ( == --amend)
   >>  git commit 만 돌림
git reset (--mixed) head : 커밋을 이전으로 돌리고 staging area 비움
   >>  git commit , git add 둘 다 돌림
git reset --hard head : 커밋을 이전으로 돌리고 staging area 비우고 워킹 디렉토리를 Index의 상태로 만든다.
   >> git commit , git add 둘 다 돌림 + 워킹 디렉토리를 Index의 상태로 만든다.

git reset [파일명] : HEAD에서 Index로 복사 ( == git reset --mixed HEAD [파일명] ) >> git add의 정반대 행위

#### 브랜치
git branch [브랜치명] : 브랜치 생성
git log --oneline --decorate : HEAD 정보가 어느 브랜치에 있는지 확인 ( HEAD는 작업중인 브랜치)
git checkout [브랜치명] : HEAD 정보를 특정 브랜치로 변경
git log --oneline --decorate --graph --all : 브랜치를 이동하면서 작업한 경우 모든 브랜치에서 했던 수행 이력을 볼수 있음

git checkout -b [브랜치명] : 브랜치생성및 HEAD 이동 ( git branch  + git checkout)
git merge [브랜치명] : master에서 merge ( master 브랜치로 HEAD 이동후 실행하면 master 브랜치에 merge 시킴)
git rebase [브랜치명] : merge와 같은 기능( merge 최종이력만 rebase는 모든 히스토리를 순서대로 관리해줌)
git rebase --onto [a] [b] [c] : a,b,c의 공통커밋 조상을 없앤 c를 재구성해서 a에 붙힘
git branch -d [브랜치명] : 브랜치 삭제 ( 머지가 완료된 브랜치는 삭제처리)
git branch -D [브랜치명] : 브랜치 삭제 ( 머지 안된 브랜치는 강제 삭제처리)
git branch : 브랜치 목록 조회 ( * 표시가 HEAD임)
git branch -v : 브랜치별로 마지막 커밋 로그
git branch --merged : 머지된 브랜치 리스트
git branch --no--merged : 머지되지 않은 브랜치 리스트
git stash : 커밋 하지 않을 미완료된 소스 임시저장
git stash list : stash 목록 확인
git stash apply : 최근 stash 정보 불러오기
git stash apply [stash명] : 특정 stash 정보 불러오기
git stash drop : 가장 최근의 stash를 제거한다.
git stash drop [stash 이름] : 특정 stash 제거
git stash show -p | git apply -R : 가장 최근의 stash를 사용하여 패치를 만들고 그것을 거꾸로 적용한다.
git stash show -p [stash 이름] | git apply -R : stash 이름(ex. stash@{2})에 해당하는 stash를 이용하여 거꾸로 적용한다.

Tip) alias로 편리하게 사용하기
$ git config --global alias.stash-unapply '!git stash show -p | git apply -R'
$ git stash apply
$ #... work work work
// alias로 등록한 stash 되돌리기 명령어
$ git stash-unapply



### remote 브랜치
git branch [브랜치명] : 새로운 브랜치 생성
git checkout [브랜치명] : 브랜치 checkout(다른 브랜치로 이동)
>>> git checkout -b [브랜치명] : 생성부터 이동까지 한방에~~
git push origin [브랜치명] : Git remote branch 생성
git branch --set-upstream-to origin/[브랜치명] : branch local remote 연동 (업스트림연결)
git branch -u origin/[브랜치명] : branch local remote 연동 (업스트림연결)
git branch -d [브랜치명] : 브랜치 삭제
git branch -D [브랜치명] : 브랜치 강제로 삭제
git push origin :[브랜치명] : remote branch 삭제
git push origin --d :[브랜치명]  : remote branch 삭제

git remote add [브랜치명] [git주소] : remote 브랜치 생성
git remote rename [A] [B] : A -> B로 remote브랜치 이름 변경
git remote remove  [브랜치명] : 브랜치 삭제
git ls-remote : 모든 리모트 Refs를 조회
git remote : 모든 원격 브랜치 조회
git remote -v :  브랜치 정보 추가로 단축이름과 URL을 같이 볼수 있음
git remote show : 모든 원격 브랜치 조회
git fetch origin [브랜치명] : 원격 브랜치에서 local 브랜치로 새로운 정보를 내려받음
git checkout -b [로컬브랜치명] origin/[remote브랜치명] : 로컬에 브랜치를 생성하면서 remote 브랜치의 소스를 받아옴
git branch -u origin/[브랜치명] : 브랜치별 추적 브랜치 설정 (커밋차이비교용)
git branch -vv : 브랜치별 추적 상태 비교(커밋차이비교)