#server port setting
server.port = 8080

#Properties
app.name = lake staudy
#바로 위의 app.name을 변수로 받아서 처리할 수 있음
app.fullName = ${app.name} group
#0~100까지의 랜덤 int 값
app.randomValue = ${random.int(0,100)}
#duration type
app.sessionTimeout= 25
        
#profile 우선순위
#1) 테스트에 있는 @TestPropertySource(classpath:/properties이름) → 테스트 할 때 이렇게 하는게 좋아 보임
#2) @SpringBootTest 애노테이션의 properties 애트리뷰트
#3) 커맨드 라인 아규먼트
#4) JAR 밖에 있는 특정 프로파일용 application properties
#5) JAR 안에 있는 특정 프로파일용 application properties
#6) JAR 밖에 있는 application properties
#7) JAR 안에 있는 application properties
#profile설정  ( 이설정은 커맨드라인 아규먼트로 설정해 주는것이 좋다 (properties 우선순위가 높음) )
spring.profiles.active = prod

#logging
#log4j -> logfactory ( log4j 성능 이슈로 logback(LoggerFactory) 사용 or log4j2 사용해야함)
#logging level
# TRACE > DEBUG > INFO > WARN > ERROR
#로그 색상
spring.output.ansi.enabled = always
#파일에 로그 남기기
#로깅파일설정
#logging.file=
#로깅디렉토리설정 spring.log로 남음
#logging.path=logs
#로깅 파일 최대 사이즈 설정
#logging.file.max-size=100
#로깅 파일 아카이브 시점 설정
#logging.file.max-history=100
#패키지별로 로깅 레벨을 설정가능
#spring framework logging
logging.level.org.springframework = INFO
#local application logging (운영시에는 INFO 설정)
logging.level.com.lake.smartway = DEBUG

#static 리소스 기본맵핑설정 변경
# http://localhost:8080/hello.html -> http://localhost:8080/lake/hello.html
#spring.mvc.static-path-pattern = lake/**

# H2 Console 기능을 사용 ( http://localhost:8080/h2-console )
spring.h2.console.enabled=true

# postgre datasource properties
#spring.datasource.url=jdbc:postgresql://localhost:5432/springboot
#spring.datasource.username = lake
#spring.datasource.password = zxasqw12
# org.postgresql.jdbc.PgConnection.createClob() is not yet implemented 관련 에러 없애는 법
#spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true

#schema-${platform}.sql 파일과 data-${platform}.sql 파일을 읽어 드려서 스키마및 데이터 생성
#파일명 예 : schema-postgresql.sql, data-postgresql.sql
#spring.datasource.platform=postgresql

#JPA
# NONE : 아무것도 하지 않는다
# CREATE : session factory가 시작될때 기존걸 지우고 새로 스키마 등록
# CREATE-DROP : session factory가 시작될때 기존걸 지우고 새로 스키마 등록 그리고 추가로 session factory가 종료될때 지운다.
# UPDATE : 서버가 뜰때 기존 스키마는 나두고 추가된 스키마만 변경 ( 신규 추가 되고, 기존건 유지 그래서 기존 데이터 유지가능) 칼럼 추가 O , 칼럼 변경된건 알수 없음
# VALIDATE : entity 맵핑이 릴레이션 db에 서로 매핑이 되는지 검증 ( 운영용 )
spring.jpa.hibernate.ddl-auto = create-drop
# true로 설정 시, Entity 어노테이션(@Entity)이 명시된 클래스를 찾아서 ddl을 생성하고 실행 - 위의 옵션(spring.jpa.hibernate.ddl-auto)을 사용할지 말지 결정 ( 기본값은 false )
# false는 운영용
spring.jpa.generate-ddl=false
#spring.jpa.generate-ddl = false (운영용)
# sql 로그 (기본값 = false)
spring.jpa.show-sql = true

# Neo4j 설정
#spring.data.neo4j.password = 1111
#spring.data.neo4j.username = neo4j

# actuator base url 설정
#management.endpoints.web.base-path=/monitor

